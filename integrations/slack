#!/usr/bin/env python
# Copyright (C) 2015, Wazuh Inc.
# March 13, 2018.
#
# This program is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License (version 2) as published by the FSF - Free Software
# Foundation.

import json
import sys
import os
import logging
import logging.handlers
from urllib.parse import urlparse

try:
    import requests
    from requests.auth import HTTPBasicAuth
except Exception as e:
    print("No module 'requests' found. Install: pip install requests")
    sys.exit(1)

# ossec.conf configuration:
#  <integration>
#      <name>slack</name>
#      <hook_url>https://hooks.slack.com/services/XXXXXXXXXXXXXX</hook_url>
#      <alert_format>json</alert_format>
#  </integration>

# Set paths
pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
LOG_FILE = f'{pwd}/logs/integrations.log'

# Global vars
logger = logging.getLogger("slack")
consoleHandler = logging.StreamHandler()
fileHandler = logging.handlers.WatchedFileHandler(LOG_FILE)
formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s", "%a %b %d %H:%M:%S %Z %Y")
consoleHandler.setFormatter(formatter)
fileHandler.setFormatter(formatter)
logger.addHandler(consoleHandler)
logger.addHandler(fileHandler)
pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

def main(alert_file_location: str, webhook: str):
    logger.info("Starting")
    logger.info("Alerts file location: %s", alert_file_location)
    logger.info("Webhook: %s", webhook)

    json_alert = load_alert(alert_file_location)
    msg = generate_msg(json_alert)
    send_msg(msg, webhook)


def load_alert(file_path: str) -> object:
    '''Load alert and parse JSON object'''
    json_alert = {}
    try:
        with open(file_path, encoding='utf-8') as f:
            json_alert = json.load(f)
    except json.decoder.JSONDecodeError as e:
        raise Exception(f"Failed getting json alert: {e}")

    logger.info("Processing alert with ID %s", json_alert["id"])
    logger.debug("Alert:\n%s", json_alert)

    return json_alert


def generate_msg(alert: object) -> str:
    logger.info("Generating message")

    level = alert['rule']['level']

    if (level <= 4):
        color = "good"
    elif (level >= 5 and level <= 7):
        color = "warning"
    else:
        color = "danger"

    msg = {}
    msg['color'] = color
    msg['pretext'] = "WAZUH Alert"
    msg['title'] = alert['rule']['description'] if 'description' in alert['rule'] else "N/A"
    msg['text'] = alert.get('full_log')

    msg['fields'] = []
    if 'agent' in alert:
        msg['fields'].append({
            "title": "Agent",
            "value": "({0}) - {1}".format(
                alert['agent']['id'],
                alert['agent']['name']
            ),
        })
    if 'agentless' in alert:
        msg['fields'].append({
            "title": "Agentless Host",
            "value": alert['agentless']['host'],
        })
    msg['fields'].append({"title": "Location", "value": alert['location']})
    msg['fields'].append({
        "title": "Rule ID",
        "value": "{0} _(Level {1})_".format(alert['rule']['id'], level),
    })

    msg['ts'] = alert['id']
    attach = {'attachments': [msg]}

    json_msg = json.dumps(attach)
    logger.debug("Message:\n%s", json_msg)

    return json_msg


def send_msg(msg: str, url: str):
    logger.info("Sending message")

    headers = {'content-type': 'application/json', 'Accept-Charset': 'UTF-8'}
    res = requests.post(url, data=msg, headers=headers)
    if res.status_code == 200:
        logger.info("Message sent successfully")
    else:
        raise requests.HTTPError("Failed sending message", res.reason)

    logger.debug("Slack response:\nDate: %s\nStatus code: %d\nURL: %s\nSlack unique ID: %s",
                 res.headers["date"], res.status_code, res.url, res.headers["x-slack-unique-id"])


def print_help_msg():
    help_msg = '''Exiting: Invalid arguments.
    
Usage:
    slack [Alerts file path] [API key] [Webhook URL] [Logging level]

Arguments:
    Alerts file path (required)
        Path to the JSON file containing the alerts.

    API key (not required)
        The API key argument is not needed for the Slack integration. However, it's still considered because the 
        integrator executes all scripts with the same arguments.
        If you are executing the script manually, please put anything in that argument.

    Webhook URL (required)
        Slack webhook URL where the messages will be sent to.

    Logging level (optional)
        Used to define how much information should be logged. Default is INFO.

        Levels: NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL.
    '''
    print(help_msg)


def is_valid_url(url: str) -> bool:
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except ValueError:
        return False


if __name__ == "__main__":
    try:
        # Read arguments
        invalid_arguments = False
        if len(sys.argv) >= 3:
            msg = '{0} {1} {2} {3}'.format(
                sys.argv[1],
                sys.argv[2],
                sys.argv[3],
                sys.argv[4].upper() if len(sys.argv) > 4 else 'INFO'
            )
        else:
            invalid_arguments = True

        if invalid_arguments:
            print_help_msg()
            sys.exit(1)

        alert_file_location = sys.argv[1]
        if not os.path.exists(alert_file_location):
            raise FileNotFoundError(f"Alert file specified {alert_file_location} does not exist")

        webhook = sys.argv[3]
        if not is_valid_url(webhook):
            raise Exception(f"Invalid webhook URL: {webhook}")

        if len(sys.argv) > 4:
            logger.setLevel(sys.argv[4].upper())
        else:
            logger.setLevel(logging.INFO)

        # Logging the call
        logger.debug(msg)

        # Main function
        main(alert_file_location, webhook)

    except Exception as e:
        logger.error(str(e))
        raise
